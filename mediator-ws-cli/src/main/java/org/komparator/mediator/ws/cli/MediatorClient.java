package org.komparator.mediator.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.xml.ws.BindingProvider;
import javax.xml.ws.WebServiceException;

import java.net.*;

import org.komparator.mediator.ws.*;
import org.komparator.mediator.ws.handler.DuplicateClientHandler;

import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;


/**
 * Client.
 *
 * Adds easier endpoint address configuration and 
 * UDDI lookup capability to the PortType generated by wsimport.
 */
public class MediatorClient implements MediatorPortType {
    /** WS service */
    MediatorService service = null;

    /** WS port (port type is the interface, port is the implementation) */
    MediatorPortType port = null;

    /** UDDI server URL */
    private String uddiURL = null;

    /** WS name */
    private String wsName = null;

    /** WS endpoint address */
    private String wsURL = null; // default value is defined inside WSDL

    public String getWsURL() {
        return wsURL;
    }

    /** output option **/
    private boolean verbose = false;

    public boolean isVerbose() {
        return verbose;
    }

    public void setVerbose(boolean verbose) {
        this.verbose = verbose;
    }

    /** constructor with provided web service URL */
    public MediatorClient(String wsURL) throws MediatorClientException {
        this.wsURL = wsURL;
        createStub();
    }

    /** constructor with provided UDDI location and name */
    public MediatorClient(String uddiURL, String wsName) throws MediatorClientException {
        this.uddiURL = uddiURL;
        this.wsName = wsName;
        uddiLookup();
        createStub();
    }

    /** UDDI lookup */
    private void uddiLookup() throws MediatorClientException {
        try {
            if (verbose)
                System.out.printf("Contacting UDDI at %s%n", uddiURL);
            UDDINaming uddiNaming = new UDDINaming(uddiURL);

            if (verbose)
                System.out.printf("Looking for '%s'%n", wsName);
            wsURL = uddiNaming.lookup(wsName);

        } catch (Exception e) {
            String msg = String.format("Client failed lookup on UDDI at %s!",
                    uddiURL);
            throw new MediatorClientException(msg, e);
        }

        if (wsURL == null) {
            String msg = String.format(
                    "Service with name %s not found on UDDI at %s", wsName,
                    uddiURL);
            throw new MediatorClientException(msg);
        }
    }

    /** Stub creation and configuration */
    private void createStub() {
        if (verbose)
            System.out.println("Creating stub ...");
        service = new MediatorService();
        port = service.getMediatorPort();

        if (wsURL != null) {
            if (verbose)
                System.out.println("Setting endpoint address ...");
            BindingProvider bindingProvider = (BindingProvider) port;
            Map<String, Object> requestContext = bindingProvider
                    .getRequestContext();
    		requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
    		int connectionTimeout = 1000; //connection timeout value is adjustable by changing this variable

            final List<String> CONN_TIME_PROPS = new ArrayList<String>();
            CONN_TIME_PROPS.add("com.sun.xml.ws.connect.timeout");
            CONN_TIME_PROPS.add("com.sun.xml.internal.ws.connect.timeout");
            CONN_TIME_PROPS.add("javax.xml.ws.client.connectionTimeout");

            for (String propName : CONN_TIME_PROPS)
                requestContext.put(propName, connectionTimeout);

            int receiveTimeout = 2000; //response timeout value is adjustable by changing this variable

            final List<String> RECV_TIME_PROPS = new ArrayList<String>();
            RECV_TIME_PROPS.add("com.sun.xml.ws.request.timeout");
            RECV_TIME_PROPS.add("com.sun.xml.internal.ws.request.timeout");
            RECV_TIME_PROPS.add("javax.xml.ws.client.receiveTimeout");

            for (String propName : RECV_TIME_PROPS)
                requestContext.put(propName, receiveTimeout);
        }
    }

    // remote invocation methods ----------------------------------------------
    
    @Override
	public void clear(){
		try {
			port.clear();
        } catch(WebServiceException wse) {
            System.out.println("Caught: " + wse);
            Throwable cause = wse.getCause();
            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof java.net.ConnectException)) {
                System.out.println("The cause was a timeout exception: " + cause);
                try {
					uddiLookup();
	                createStub();
				} catch (MediatorClientException e) {
					System.out.println("Error on uddiLookup");
				}
                clear();
            }
        }
	}

    @Override
	public String ping(String arg0){
    	try {
    		return port.ping(arg0);
        } catch(WebServiceException wse) {
            System.out.println("Caught: " + wse);
            Throwable cause = wse.getCause();
            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof java.net.ConnectException)) {
                System.out.println("The cause was a timeout exception: " + cause);
                try {
					uddiLookup();
	                createStub();
				} catch (MediatorClientException e) {
					System.out.println("Error on uddiLookup");
				}
                return ping(arg0);
            }
        }
    	return null;
	}

    @Override
	public List<ItemView> searchItems(String descText) throws InvalidText_Exception {
    	try {
    		return port.searchItems(descText);
        } catch(WebServiceException wse) {
            System.out.println("Caught: " + wse);
            Throwable cause = wse.getCause();
            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof java.net.ConnectException)) {
                System.out.println("The cause was a timeout exception: " + cause);
                try {
					uddiLookup();
	                createStub();
				} catch (MediatorClientException e) {
					System.out.println("Error on uddiLookup");
				}
                return searchItems(descText);
            }
        }
    	return null;
	}

    @Override
	public List<CartView> listCarts() {
    	try {
    		return port.listCarts();
        } catch(WebServiceException wse) {
            System.out.println("Caught: " + wse);
            Throwable cause = wse.getCause();
            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof java.net.ConnectException)) {
                System.out.println("The cause was a timeout exception: " + cause);
                try {
					uddiLookup();
	                createStub();
				} catch (MediatorClientException e) {
					System.out.println("Error on uddiLookup");
				}
                return listCarts();
            }
        }
    	return null;
	}

	@Override
	public List<ItemView> getItems(String productId) throws InvalidItemId_Exception {
		try {
			return port.getItems(productId);
        } catch(WebServiceException wse) {
            System.out.println("Caught: " + wse);
            Throwable cause = wse.getCause();
            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof java.net.ConnectException)) {
                System.out.println("The cause was a timeout exception: " + cause);
                try {
					uddiLookup();
	                createStub();
				} catch (MediatorClientException e) {
					System.out.println("Error on uddiLookup");
				}
                return getItems(productId);
            }
        }
    	return null;
	}

	@Override
	public ShoppingResultView buyCart(String cartId, String creditCardNr)
			throws EmptyCart_Exception, InvalidCartId_Exception, InvalidCreditCard_Exception {	
		try {
			return port.buyCart(cartId, creditCardNr);
        } catch(WebServiceException wse) {
            System.out.println("Caught: " + wse);
            Throwable cause = wse.getCause();
            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof java.net.ConnectException)) {
                System.out.println("The cause was a timeout exception: " + cause);
                try {
					uddiLookup();
	                createStub();
				} catch (MediatorClientException e) {
					System.out.println("Error on uddiLookup");
				}
                return buyCart(cartId, creditCardNr);
            }
        }
    	return null;
	}

	@Override
	public void addToCart(String cartId, ItemIdView itemId, int itemQty) throws InvalidCartId_Exception,
			InvalidItemId_Exception, InvalidQuantity_Exception, NotEnoughItems_Exception {
		try {
			port.addToCart(cartId, itemId, itemQty);
        } catch(WebServiceException wse) {
            System.out.println("Caught: " + wse);
            Throwable cause = wse.getCause();
            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof java.net.ConnectException)) {
                System.out.println("The cause was a timeout exception: " + cause);
                try {
					uddiLookup();
	                createStub();
				} catch (MediatorClientException e) {
					System.out.println("Error on uddiLookup");
				}
                addToCart(cartId, itemId, itemQty);
            }
        }
	}

	@Override
	public List<ShoppingResultView> shopHistory() {
		try {
			return port.shopHistory();
        } catch(WebServiceException wse) {
            System.out.println("Caught: " + wse);
            Throwable cause = wse.getCause();
            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof java.net.ConnectException)) {
                System.out.println("The cause was a timeout exception: " + cause);
                try {
					uddiLookup();
	                createStub();
				} catch (MediatorClientException e) {
					System.out.println("Error on uddiLookup");
				}
                return shopHistory();
            }
        }
    	return null;
	}

	@Override
	public void imAlive() {
		try {
			port.imAlive();
        } catch(WebServiceException wse) {
            System.out.println("Caught: " + wse);
            Throwable cause = wse.getCause();
            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof java.net.ConnectException)) {
                System.out.println("The cause was a timeout exception: " + cause);
                try {
					uddiLookup();
	                createStub();
				} catch (MediatorClientException e) {
					System.out.println("Error on uddiLookup");
				}
                imAlive();
            }
        }		
	}

	@Override
	public void updateShopHistory(ShoppingResultView shoppingResultView, String pid) {
		try {
			port.updateShopHistory(shoppingResultView, pid);
        } catch(WebServiceException wse) {
            System.out.println("Caught: " + wse);
            Throwable cause = wse.getCause();
            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof java.net.ConnectException)) {
                System.out.println("The cause was a timeout exception: " + cause);
                try {
					uddiLookup();
	                createStub();
				} catch (MediatorClientException e) {
					System.out.println("Error on uddiLookup");
				}
                updateShopHistory(shoppingResultView, pid);
            }
        }
	}

	@Override
	public void updateCart(CartView cartView, String pid) {
		try {
			port.updateCart(cartView, pid);
        } catch(WebServiceException wse) {
            System.out.println("Caught: " + wse);
            Throwable cause = wse.getCause();
            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof java.net.ConnectException)) {
                System.out.println("The cause was a timeout exception: " + cause);
                try {
					uddiLookup();
	                createStub();
				} catch (MediatorClientException e) {
					System.out.println("Error on uddiLookup");
				}
                updateCart(cartView, pid);
            }
        }		
	}

	@Override
	public void updateClear() {
		try {
			port.updateClear();
        } catch(WebServiceException wse) {
            System.out.println("Caught: " + wse);
            Throwable cause = wse.getCause();
            if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof java.net.ConnectException)) {
                System.out.println("The cause was a timeout exception: " + cause);
                try {
					uddiLookup();
	                createStub();
				} catch (MediatorClientException e) {
					System.out.println("Error on uddiLookup");
				}
                updateClear();
            }
        }	
	}
}